{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CountriesService {\n  constructor() {\n    this.apiUrl = 'https://restcountries.com/v3.1';\n    this.http = inject(HttpClient);\n  }\n  searchCountryByAlphaCode(term) {\n    return this.http.get(`${this.apiUrl}/alpha/${term}`).pipe(map(countries => countries.length > 0 ? countries[0] : null), catchError(error => of(null)));\n  }\n  searchCapital(term) {\n    return this.http.get(`${this.apiUrl}/capital/${term}`).pipe(catchError(error => of([])));\n  }\n  searchCountry(term) {\n    return this.http.get(`${this.apiUrl}/name/${term}`).pipe(catchError(error => of([])));\n  }\n  searchRegion(term) {\n    return this.http.get(`${this.apiUrl}/region/${term}`).pipe(catchError(error => of([])));\n  }\n  static #_ = this.ɵfac = function CountriesService_Factory(t) {\n    return new (t || CountriesService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CountriesService,\n    factory: CountriesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","inject","catchError","map","of","CountriesService","constructor","apiUrl","http","searchCountryByAlphaCode","term","get","pipe","countries","length","error","searchCapital","searchCountry","searchRegion","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\pedro\\OneDrive\\Desktop\\CountrySPA\\src\\app\\countries\\services\\countries.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, inject } from '@angular/core';\r\nimport { Observable, catchError, map, of, tap } from 'rxjs';\r\nimport { Country } from '../interfaces/country.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CountriesService {\r\n\r\n  apiUrl: string = 'https://restcountries.com/v3.1'\r\n\r\n  http = inject(HttpClient)\r\n  constructor() { }\r\n\r\n  searchCountryByAlphaCode( term: string ): Observable<Country | null> {\r\n    return this.http.get<Country[]>(`${this.apiUrl}/alpha/${term}`)\r\n          .pipe(\r\n            map(countries => countries.length > 0 ? countries[0] : null),\r\n            catchError(error => of(null))\r\n            )\r\n  }\r\n\r\n  searchCapital( term: string ): Observable<Country[]> {\r\n    return this.http.get<Country[]>(`${this.apiUrl}/capital/${term}`)\r\n          .pipe(\r\n            catchError(error => of([]))\r\n          )\r\n  }\r\n\r\n  searchCountry( term: string ): Observable<Country[]> {\r\n    return this.http.get<Country[]>(`${this.apiUrl}/name/${term}`)\r\n          .pipe( catchError(error => of([])))\r\n  }\r\n\r\n  searchRegion( term: string ): Observable<Country[]> {\r\n    return this.http.get<Country[]>(`${this.apiUrl}/region/${term}`)\r\n          .pipe( catchError(error => of([])))\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAAqBC,MAAM,QAAQ,eAAe;AAClD,SAAqBC,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAa,MAAM;;AAM3D,OAAM,MAAOC,gBAAgB;EAK3BC,YAAA;IAHA,KAAAC,MAAM,GAAW,gCAAgC;IAEjD,KAAAC,IAAI,GAAGP,MAAM,CAACD,UAAU,CAAC;EACT;EAEhBS,wBAAwBA,CAAEC,IAAY;IACpC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,UAAUG,IAAI,EAAE,CAAC,CACxDE,IAAI,CACHT,GAAG,CAACU,SAAS,IAAIA,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,EAC5DX,UAAU,CAACa,KAAK,IAAIX,EAAE,CAAC,IAAI,CAAC,CAAC,CAC5B;EACX;EAEAY,aAAaA,CAAEN,IAAY;IACzB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,YAAYG,IAAI,EAAE,CAAC,CAC1DE,IAAI,CACHV,UAAU,CAACa,KAAK,IAAIX,EAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;EACT;EAEAa,aAAaA,CAAEP,IAAY;IACzB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,SAASG,IAAI,EAAE,CAAC,CACvDE,IAAI,CAAEV,UAAU,CAACa,KAAK,IAAIX,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3C;EAEAc,YAAYA,CAAER,IAAY;IACxB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAY,GAAG,IAAI,CAACJ,MAAM,WAAWG,IAAI,EAAE,CAAC,CACzDE,IAAI,CAAEV,UAAU,CAACa,KAAK,IAAIX,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3C;EAAC,QAAAe,CAAA,G;qBA9BUd,gBAAgB;EAAA;EAAA,QAAAe,EAAA,G;WAAhBf,gBAAgB;IAAAgB,OAAA,EAAhBhB,gBAAgB,CAAAiB,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}